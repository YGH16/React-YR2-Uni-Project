{"version":3,"sources":["pics/Rain.png","pics/Cloudy.png","pics/Thunderstorm.png","pics/Sunny.png","search-solid.svg","volume-up-solid.svg","pics/wind.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","locationdata","undefined","tempreturedata","App","state","temp","desc","loc","icon","whatShouldIwear","getWeather","e","a","preventDefault","inputU","document","getElementById","value","console","log","finishedurl","fetch","api_call","json","data","setState","name","main","weather","Math","round","tempreture","weatherDesc","thunder","rain","sun","clouds","bigman","bigmansdata","this","style","display","finalurl","innerHTML","Date","list","dt_txt","slice","toDateString","msg","SpeechSynthesisUtterance","volume","rate","pitch","text","speechSynthesis","speak","className","id","type","placeholder","href","onClick","alt","src","search","height","width","openModal","closeModal","openForecast","testerFunction","speaker","closeForecast","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36ba0587.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rain.923468d9.png\";","module.exports = __webpack_public_path__ + \"static/media/Cloudy.884258b8.png\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.d695020c.png\";","module.exports = __webpack_public_path__ + \"static/media/Sunny.3a20a523.png\";","module.exports = __webpack_public_path__ + \"static/media/search-solid.c6a0effb.svg\";","module.exports = __webpack_public_path__ + \"static/media/volume-up-solid.cc275a79.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.39281fcb.png\";","import React from 'react';\nimport search from './search-solid.svg';\nimport speaker from './volume-up-solid.svg';\nimport './App.css';\n//importing the weather icons into the app\nimport clouds from './pics/Cloudy.png';\nimport thunder from './pics/Thunderstorm.png';\nimport rain from './pics/Rain.png';\nimport sun from './pics/Sunny.png';\nimport wind from './pics/wind.png';\n\n\nvar locationdata = undefined;\nvar tempreturedata = undefined;\n// All the Components states are being set to undefined so they can be set later on\nclass App extends React.Component {\n  state ={\n    temp: undefined, //Stores the temp from the api call\n    desc: undefined, //Stores the description of weather from api call\n    loc: undefined, //Stores the loaction of the api call\n    icon: undefined, //Stores the weather icon according to the description\n    whatShouldIwear: undefined //Stores the different suggestions of what to wear\n  };\n  //This is function belonging to react and is executed after the first initial render of the app\n  async componentDidMount() {\n    //Api call is done here using the javascripts fetch api\n    const bigman = await fetch('http://api.openweathermap.org/data/2.5/weather?q=London&units=metric&APPID=828ff9d6aee47ba7cc86c7097eb8b918');\n    const bigmansdata = await bigman.json();\n\n    //The data is taken from the api and is stored into the Component states\n    this.setState({\n      temp: bigmansdata.main.temp,\n      desc: bigmansdata.weather[0].main,\n      loc: bigmansdata.name\n    })\n\n    var tempreture = Math.round(bigmansdata.main.temp);\n    locationdata = bigmansdata.name;\n    tempreturedata = Math.round(bigmansdata.main.temp);\n    console.log(\"locdata = \" + locationdata);\n    console.log(\"tempdata = \" + tempreturedata);\n    console.log(tempreture);\n    //Comparisons are made here using the tempreture from api to suggest clothing items for user\n\n    if (tempreture <= 10) {\n      this.setState({whatShouldIwear: 'Wear a coat, it is quite cold'})\n    }else if (tempreture >= 10) {\n      this.setState({whatShouldIwear: 'consider wearing a jacket'})\n    }else if (tempreture >= 20) {\n      this.setState({whatShouldIwear: 'Wear light clothing'})\n    }\n\n\n    var weatherDesc = bigmansdata.weather[0].main;\n\n    if (weatherDesc === \"Thunderstorm\") {\n      console.log(\"thunder\");\n      this.setState({icon: thunder});\n\n    }else if(weatherDesc === \"Drizzle\"){\n      console.log(\"drizzle\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Rain\") {\n      console.log(\"Rain\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Snow\") {\n      console.log(\"Snow\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Clear\") {\n      console.log(\"clear\")\n      this.setState({icon: sun});\n    }else if(weatherDesc === \"Clouds\"){\n      console.log(\"Clouds\")\n      this.setState({icon: clouds});\n    }\n  }\n\n  //This is a second api call method, takes input from the search bar and uses that location for the api call\n  getWeather = async (e) =>{\n    e.preventDefault();\n\n    //user input is stored into a variable\n    const inputU = document.getElementById('searchbar').value;\n\n    console.log(inputU);\n\n    //User input is combined with the api url link\n    var url1 = 'http://api.openweathermap.org/data/2.5/weather?q=';\n    var url2 = '&units=metric&APPID=828ff9d6aee47ba7cc86c7097eb8b918';\n    var finishedurl = url1+inputU+url2;\n\n    //api call is made to the location taken from the user from searchbar\n    const api_call = await fetch(finishedurl);\n    const data = await api_call.json();\n    console.log(data);\n\n    //Componets states weather information is updated to the new location\n    this.setState({\n      loc: data.name,\n      temp: data.main.temp,\n      desc: data.weather[0].main\n    });\n\n    locationdata = data.name;\n    tempreturedata = Math.round(data.main.temp);\n    console.log(\"updated locdata = \" + locationdata);\n    console.log(\"updated tempdata = \" + tempreturedata);\n\n    var tempreture = Math.round(data.main.temp);\n    //Comparisons are made again using the Tempreture\n    if (tempreture < 10) {\n      this.setState({whatShouldIwear: 'Wear a coat, it is quite cold'})\n    }else if (tempreture >= 10) {\n      this.setState({whatShouldIwear: 'consider wearing a jacket'})\n    }else if (tempreture >= 20) {\n      this.setState({whatShouldIwear: 'Wear light clothing'})\n    }\n\n    var weatherDesc = data.weather[0].main;\n\n    if (weatherDesc === \"Thunderstorm\") {\n      console.log(\"thunder\");\n      this.setState({icon: thunder});\n\n    }else if(weatherDesc === \"Drizzle\"){\n      console.log(\"drizzle\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Rain\") {\n      console.log(\"Rain\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Snow\") {\n      console.log(\"Snow\")\n      this.setState({icon: rain});\n\n    }else if (weatherDesc === \"Clear\") {\n      console.log(\"clear\")\n      this.setState({icon: sun});\n    }else if(weatherDesc === \"Clouds\"){\n      console.log(\"Clouds\")\n      this.setState({icon: clouds});\n    }\n  }\n  //function used to open the 'what should i wear button'\n  openModal(){\n    var modal = document.getElementById('myModal');\n    modal.style.display = \"block\";\n  }\n  //function used to close out the modal of the 'what should i wear'\n  closeModal(){\n    var modals = document.getElementById('myModal');\n    modals.style.display = \"none\";\n  }\n  //function used to open the 5day forecast modal and used call the 5day openweather api\n  async openForecast(){\n    var modals = document.getElementById('Modalday');\n    modals.style.display = \"block\";\n\n    var url1 = 'http://api.openweathermap.org/data/2.5/forecast?q=';\n    var finalurl = url1 + locationdata + \"&units=metric&appid=828ff9d6aee47ba7cc86c7097eb8b918\";\n\n    //api call for the 5day Forecast\n    const api_call = await fetch(finalurl);\n    const data = await api_call.json();\n\n    //taking the id of each element in the modal and assign it a date and tempreture value from the api\n    document.getElementById('loc-forecast').innerHTML = locationdata;\n\n    document.getElementById('d1d').innerHTML = new Date(data.list[4].dt_txt.slice(0,10)).toDateString();\n    document.getElementById('d1').innerHTML =  \"Avg Temperature: \" + Math.round(data.list[4].main.temp) + \"°\";\n\n    document.getElementById('d2d').innerHTML = new Date(data.list[12].dt_txt.slice(0,10)).toDateString();\n    document.getElementById('d2').innerHTML =\"Avg Temperature: \" + Math.round(data.list[12].main.temp) + \"°\";\n\n    document.getElementById('d3d').innerHTML = new Date(data.list[20].dt_txt.slice(0,10)).toDateString();\n    document.getElementById('d3').innerHTML =\"Avg Temperature: \" + Math.round(data.list[20].main.temp) + \"°\";\n\n    document.getElementById('d4d').innerHTML = new Date(data.list[28].dt_txt.slice(0,10)).toDateString();\n    document.getElementById('d4').innerHTML = \"Avg Temperature: \" + Math.round(data.list[28].main.temp) + \"°\";\n\n    document.getElementById('d5d').innerHTML = new Date(data.list[36].dt_txt.slice(0,10)).toDateString();\n    document.getElementById('d5').innerHTML = \"Avg Temperature: \" + Math.round(data.list[36].main.temp) + \"°\";\n\n      document.getElementById('update-time').innerHTML = \"<b>Last Updated<b> \"+  new Date().toDateString();\n  }\n  //function used to close the 5day weather modal\n  closeForecast(){\n    var modals = document.getElementById('Modalday');\n    modals.style.display = \"none\";\n  }\n\n  testerFunction(){\n    const msg = new SpeechSynthesisUtterance();\n    msg.volume = 1; // 0 to 1\n    msg.rate = 1; // 0.1 to 10\n    msg.pitch = 1.5; // 0 to 2\n    msg.text  = \"The weather in \" + locationdata + \" is \" + tempreturedata + \" degrees celsius\";\n    var speaks ={\"name\": \"Alex\",\"lang\": \"en-US\"};\n\n    const voice = speaks[0]; //47\n\n\n    speechSynthesis.speak(msg);\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"lol\">\n        {/*Searchbar used to manually search a location*/}\n        <div id=\"search\">\n          <input type=\"text\" id=\"searchbar\" placeholder=\"Search\"/>\n          <a id=\"search-btn\" href=\"\" onClick={this.getWeather}><img alt=\"\" id=\"s-b\" src={search} height=\"30px\" width=\"30px;\"/></a>\n        </div>\n\n        {/*Weather icon is displayed here*/}\n        <div id=\"display-icon\">\n\n          <img id=\"pic\" src={this.state.icon} width=\"40%\" height=\"40%\" alt=\"\"></img>\n\n        </div>\n\n        {/*Location is displayed here*/}\n        <div id=\"location\">\n          <h1>{this.state.loc}</h1>\n        </div>\n\n        {/*Description is displayed here*/}\n        <div id=\"description\">\n          <h2>{this.state.desc}</h2>\n\n        </div>\n\n        {/*Tempreture is being displayed here*/}\n        <div id=\"temp\">\n          <h3>{Math.round(this.state.temp)}°</h3>\n\n        </div>\n\n        {/* What to wear modal*/}\n        <div id=\"What to wear\">\n          <button onClick={this.openModal} id=\"b2\">What Should I Wear?</button>\n\n          <div id=\"myModal\" className=\"modal\">\n            <div className=\"modal-content\">\n              <span onClick={this.closeModal} className=\"close\">&times;</span>\n              <h1 id=\"modal-text\">{this.state.whatShouldIwear}</h1>\n            </div>\n          </div>\n        </div>\n\n        {/*Buttons at bottom of app, also the 5day forecast modal*/}\n        <div id=\"bottom\">\n          <button id=\"b0\" onClick={this.openForecast} >5 Day</button>\n          <button id=\"b1\" onClick={this.testerFunction}><img src={speaker}width=\"25%\" height=\"25%\"/></button>\n            <div id=\"Modalday\" className=\"modal1\">\n              <div className=\"modal-Forecast\">\n                <span onClick={this.closeForecast} className=\"close1\">&times;</span>\n\n                <h1 id=\"loc-forecast\">location</h1>\n                <h1>5 Day Forecast</h1>\n                <h2 id=\"d1d\">Day</h2>\n                <p id=\"d1\">d1</p>\n\n                <h2 id=\"d2d\">Day</h2>\n                <p id=\"d2\">d2</p>\n\n                <h2 id=\"d3d\">Day</h2>\n                <p id=\"d3\">d3</p>\n\n                <h2 id=\"d4d\">Day</h2>\n                <p id=\"d4\">d4</p>\n\n                <h2 id=\"d5d\">Day</h2>\n                <p id=\"d5\">d5</p>\n\n                <p id=\"update-time\">time</p>\n              </div>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}